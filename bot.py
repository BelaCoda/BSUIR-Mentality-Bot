import os
import telebot
from telebot import types
import requests
import json
import time
from dotenv import load_dotenv

load_dotenv()

bot = telebot.TeleBot(os.getenv("TOKEN"))

#—Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
isNeuro = False
is_processing = False

API_KEY = os.getenv("API_DEEPSEEK")
MODEL = "deepseek/deepseek-r1:free"

def process_content(content):
    return content.replace('<think>', '').replace('</think>', '')

def chat_completion(prompt, chat_id, message):
    global is_processing

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    system_message = {
        "role": "system",
        "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –¥–∞–µ—à—å —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –∏—Ö. –¢–≤–æ—è —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏." 
    }
    
    data = {
        "model": MODEL,
        "messages": 
        [
            system_message,
            {"role": "user", "content": prompt},
        ],
        "stream": False
    }

    
    max_attempts = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    attempt = 0

    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data
            )

            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞

            response_json = response.json()  # –ü–∞—Ä—Å–∏–º JSON

            if "choices" in response_json and len(response_json["choices"]) > 0:
                full_content = response_json["choices"][0]["message"]["content"]
                cleaned_content = process_content(full_content)
                if cleaned_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    bot.reply_to(message, cleaned_content)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                    return cleaned_content
                else:
                    attempt += 1
                    if attempt >= max_attempts:  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                        return ""
                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                attempt += 1
                if attempt >= max_attempts:  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                    bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                    return ""
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

        except requests.exceptions.RequestException as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {str(e)}")
            return ""
        except json.JSONDecodeError as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}")
            return ""
        except Exception as e:
            bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return ""



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥")
    item2 = types.KeyboardButton("–°–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
    item3 = types.KeyboardButton("–ü–æ–º–æ—â—å")
    keyboard.add(item1, item2, item3)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–ø—Å–∏—Ö–æ–ª–æ–≥ ü§ç\n–†–∞–¥, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —ç–º–æ—Ü–∏—è—Ö, –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É –≤ —Ç—Ä—É–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã—Å–ª—É—à–∞—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è.\n–¢—ã –Ω–µ –æ–¥–∏–Ω ‚Äî —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç, –∏ –º—ã –Ω–∞—á–Ω–µ–º! üå±\nP.S. –ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏—à—å—Å—è ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–æ "–ü–æ–º–æ—â—å".', reply_markup=keyboard)

@bot.message_handler(func=lambda message: True)
def on_click(message):
    global isNeuro, is_processing
    user_text = message.text

    if user_text == '–°–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞':
        markup = types.InlineKeyboardMarkup()
        website_button = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å–∞–π—Ç:", url="https://www.bsuir.by/ru/spps")
        markup.add(website_button)
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ë–ì–£–ò–†–∞:", reply_markup=markup)
    
    elif user_text == '–ù–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥':
        isNeuro = True
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        stop_button = types.KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å")
        keyboard.add(stop_button)
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –Ω–µ–π—Ä–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –µ–º—É —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. –ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å":', reply_markup=keyboard)
    
    elif user_text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å':
        isNeuro = False
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        item1 = types.KeyboardButton("–ù–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥")
        item2 = types.KeyboardButton("–°–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
        item3 = types.KeyboardButton("–ü–æ–º–æ—â—å")
        keyboard.add(item1, item2, item3)
        bot.reply_to(message, '–†–µ–∂–∏–º –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω.\n–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É', reply_markup=keyboard)
    
    elif user_text == '–ü–æ–º–æ—â—å':
        bot.send_message(message.chat.id, '"–°—Ç–∞—Ä—Ç" - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞,\n"–ü–æ–º–æ—â—å" - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã,\n"–°–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞" - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ë–ì–£–ò–†,\n"–ù–µ–π—Ä–æ—Å–ø–∏—Ö–æ–ª–æ–≥" - –Ω–∞—à –Ω–µ–π—Ä–æ—Å–ø–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –±–∞–∑–µ DeepSeek R1 (–¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å")\n')
    
    elif isNeuro:
        if is_processing:
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, "–ù–µ–π—Ä–æ—Å–µ—Ç—å –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ —Ä–∞–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        else:
            is_processing = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–Ω—è—Ç–∞
            bot.send_chat_action(message.chat.id, action="typing")
            chat_completion(user_text, message.chat.id, message)  # –í—ã–∑—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            is_processing = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.')

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞   
if __name__ == "__main__":
    bot.remove_webhook()  # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
    time.sleep(1)         
    bot.polling(none_stop=True)